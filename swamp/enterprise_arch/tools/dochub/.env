# ***********************************************************
#                    Режимы сборки и развертывания
# ***********************************************************

# DocHub может работать в трех режимах:
#   (F) frontend - "Толстый" клиент. Вся бизнес-логика находится на стороне фронта. 
#   (FB) frontend + backend - "Тонкий" клиент. Бизнес-логика в основном находится на стороне backend.
#   (P) IDEA Plugin - Плагин для IDEA. Бизнес-логика в основном находится на стороне плагина.


# ***********************************************************
#                          Переменные среды
# ***********************************************************

# (F / FB) URI в формате DocHub корневого манифеста (обязательно)
# Варианты использования:
#   /documentation/root.yaml - (F / FB) Относительная ссылка на файл расположенный в папке @/public/
#   https://dochub.info/documentation/root.yaml - (F / FB) прямая ссылка на внешний http/https ресурс
#   gitlab:34:main@root.yaml - Прямая ссылка на на файл в GitLab репозитории. 
#                              (F) Может использоваться только при указании VUE_APP_DOCHUB_PERSONAL_TOKEN или VUE_APP_DOCHUB_GITLAB_URL + VUE_APP_DOCHUB_APP_ID 
#                              (FB) Может использоваться только при указании VUE_APP_DOCHUB_PERSONAL_TOKEN
#       Структура ссылки: 
#       gitlab      - протокол GitLab
#       34          - идентификатор репозитория
#       main        - бранч
#       root.yaml   - путь к файлу
#       
#   file://root.yaml - (FB) Прямая ссылка на файл в хранилище VUE_APP_DOCHUB_BACKEND_FILE_STORAGE. 
#                       Если VUE_APP_DOCHUB_BACKEND_FILE_STORAGE не задан, то ./public/*

VUE_APP_DOCHUB_ROOT_MANIFEST=/workspace/_root.yaml
# VUE_APP_DOCHUB_ROOT_MANIFEST=/documentation/root.yaml
# (F / FB) Идентификатор документа главной страницы (необязательно). По умолчанию dochub_welcome
VUE_APP_DOCHUB_ROOT_DOCUMENT=swamp.welcome

# (F / FB) URL GitLab (необязательно)
# VUE_APP_DOCHUB_GITLAB_URL=https://foo.space

# (F / FB) Персональный токен gitlab. Используется для локальной разработки
# VUE_APP_DOCHUB_PERSONAL_TOKEN=9H...FR

# (F) Идентификатор приложения зарегистрированного в GitLab (обязательно, если есть VUE_APP_DOCHUB_GITLAB_URL и нет VUE_APP_DOCHUB_PERSONAL_TOKEN)
# https://docs.gitlab.com/ee/integration/oauth_provider.html
# VUE_APP_DOCHUB_APP_ID=5f3...f0

# (F) Секрет приложения (обязательно, если есть VUE_APP_DOCHUB_GITLAB_URL и нет VUE_APP_DOCHUB_PERSONAL_TOKEN)
# https://docs.gitlab.com/ee/integration/oauth_provider.html
# VUE_APP_DOCHUB_CLIENT_SECRET=1e4...384

# (F / FB) Сервер рендеринга PlantUML (По умолчанию www.plantuml.com/plantuml/svg/)
# При сборке через docker-compose по умолчанию localhost:8079/svg/
# VUE_APP_PLANTUML_SERVER=https://plantuml-stage.samoletgroup.ru/svg/
VUE_APP_PLANTUML_SERVER=http://localhost:9000/plantuml/svg/


# (P) Если "plugin" сборка осуществляется для использования в IDEA плагине https://github.com/RabotaRu/DocHubIdeaPlugin
# Для production сборки используйте npm run plugin.
# Данный параметр удобен для разработки в режиме плагина, т.к. подключает моки $PAPI.
# VUE_APP_DOCHUB_MODE=plugin

# (BF) Если "backend" сборка осуществляется для работы с backend
# Данный параметр удобен для разработки в режиме backend.
# VUE_APP_DOCHUB_MODE=backend

# (F/BF) Определяет тип кэширования при сборке webpack
#   memory - по умолчанию. Кэширование ведется в памяти. Оптимизирует только текущую сборку. 
#   filesystem - Кэширование ведется в файловой системе. Оптимизирует текущую и последующие сборки. Радикальный эффект заметен на последующих сборках.
VUE_APP_DOCHUB_BUILDING_CACHE=filesystem #memory / filesystem

# (BF) Определяет принцип кэширования ответов к Data Lake через backend
#   none - не кэшируется (по умолчанию)
#   memory - кеширование в памяти. При перезагрузке буде очищаться. 
#
#   Иное значение рассматривается как относительный путь к папке кеширования. Папка должна существовать!
#   В этом случае результат запроса будет сохраняться в файле. При перезагрузке кэш будет сохраняться. 
#   Для его очистки необходимо самостоятельно очистить папку с кэшем. 
#   Пример пути:
VUE_APP_DOCHUB_DATALAKE_CACHE=none


# (F / FB) Если "y" подключает в описание документацию DocHub
VUE_APP_DOCHUB_APPEND_DOCHUB_DOCS=n

# (F / FB) Содержит ссылку на базовую метамодель. По умолчанию - /metamodel/root.yaml
# VUE_APP_DOCHUB_METAMODEL = /metamodel/root.yaml
VUE_APP_DOCHUB_METAMODEL = /workspace/metamodels/default/_root.yaml

# (F / FB / P) Определяет движок рендеринга (graphviz | smetana | elk). По умолчанию ELK
VUE_APP_DOCHUB_RENDER_CORE=ELK

# (F / FB) [КЭШ] Включить/отключить кэширование(NONE | HEAD | GET) - По умолчанию NONE
# VUE_APP_DOCHUB_CACHE=NONE

# (F / FB) [УРОВЕНЬ кэширования] (1 | 2) - По умолчанию 1
# 1 - [low level] кэш сетевых запросов(requests)
# 2 - [high level] full кэш(уровень 1 + манифест)
# VUE_APP_DOCHUB_CACHE_LEVEL=1

# (F / FB) Анализатор запросов JSONata
# Выводит информацию о выполняемых запросах в консоль
VUE_APP_DOCHUB_JSONATA_ANALYZER=y

# (FB) Режим backend
# Если установлено, считается, что DocHub функционирует в режиме frontend + backend.
# По умолчанию DocHub функционирует в режиме "толстый клиент" (F). Т.е. вся бизнес-логика реализуется в frontend.
# VUE_APP_DOCHUB_BACKEND_URL= http://localhost:3030

# (FB) Порт для backend сервера. По умолчанию 3030.
# VUE_APP_DOCHUB_BACKEND_PORT=3030

# (FB) Каталог, где размещаются файлы манифестов
# По умолчанию @/public/
# ВНИМАНИЕ! Размещение файлов в @/public/ будет приводить к их прямой доступности из фронта по URL.
# VUE_APP_DOCHUB_BACKEND_FILE_STORAGE=~/DocHub/storage

# VUE_APP_DOCHUB_SSO_HOST=https://id-stage.samoletgroup.ru
# VUE_APP_DOCHUB_SSO_CLIENTID=Iq7k6TKn86a9Bij1ngSC7IYEH0VGYGZcQmIN5szj

# ***********************************************************
#                   Примеры конфигурирования
# ***********************************************************

# (F)******** Портал с документацией DocHub *****************

# Развертывание в режиме frontend (толстый клиент)
# содержимое файла .env - ПУСТО.

# Команда сборки:
#   npm run build
# Результат:
#   - В папке ./dist будет сгенерированы статические файлы, которые нужно подключить к WEB серверу
#   - Войдя на портал, пользователь увидит только документацию DocHub.
#   - Рендеринг PlantUML диаграмм будет осуществляться с использованием публичного сервера с ограничением размера контента.

# (F)******** Портал с собственной документацией *****************

# Развертывание в режиме frontend (толстый клиент)
# содержимое файла .env:

# VUE_APP_PLANTUML_SERVER=https://plantuml.local/svg/
# VUE_APP_DOCHUB_ROOT_MANIFEST=workspace/sberauto/root.yaml

# Команда сборки:
#   npm run build
# Результат:
#   - В папке ./dist будет сгенерированы статические файлы, которые нужно подключить к WEB серверу
#   - Войдя на портал, пользователь увидит документацию DocHub
#   - Войдя на портал, пользователь увидит документацию размещенную по пути ./public/workspace/sberauto/*
#   - Рендеринг PlantUML диаграмм будет осуществляться с использованием собственного сервера https://plantuml.local/svg/ (требуется развернуть).


# (F)* Портал с собственной документацией и без документации DocHub **

# Развертывание в режиме frontend (толстый клиент)
# содержимое файла .env:

# VUE_APP_DOCHUB_ROOT_MANIFEST=workspace/sberauto/root.yaml
# VUE_APP_DOCHUB_APPEND_DOCHUB_DOCS=n

# Команда сборки:
#   npm run build
# Результат:
#   - В папке ./dist будет сгенерированы статические файлы, которые нужно подключить к WEB серверу
#   - Войдя на портал, пользователь увидит документацию размещенную по пути ./public/workspace/sberauto/*
#   - Рендеринг PlantUML диаграмм будет осуществляться с использованием публичного сервера с ограничением размера контента.


# (F)* Портал с собственной документацией из GitLab без авторизации **

# Развертывание в режиме frontend (толстый клиент)
# содержимое файла .env:

# VUE_APP_DOCHUB_GITLAB_URL=https://gitlab.com/
# VUE_APP_DOCHUB_ROOT_MANIFEST=gitlab:43847396:master@root.yaml
# VUE_APP_DOCHUB_PERSONAL_TOKEN=gl...4g
# VUE_APP_PLANTUML_SERVER=https://plantuml.local/svg/

# Команда сборки:
#   npm run build
# Результат:
#   - В папке ./dist будет сгенерированы статические файлы, которые нужно подключить к WEB серверу
#   - Войдя на портал, пользователь увидит документацию размещенную по в репозитории GitLab - gitlab:43847396:master@root.yaml
#   - Рендеринг PlantUML диаграмм будет осуществляться с использованием собственного сервера https://plantuml.local/svg/ (требуется развернуть).


# (F)* Портал с собственной документацией из GitLab с авторизацией **

# Развертывание в режиме frontend (толстый клиент)
# содержимое файла .env:

# VUE_APP_DOCHUB_GITLAB_URL=https://gitlab.com/
# VUE_APP_DOCHUB_ROOT_MANIFEST=gitlab:43847396:master@root.yaml
# VUE_APP_DOCHUB_APP_ID=a00...27f
# VUE_APP_DOCHUB_CLIENT_SECRET=5d8...372

# Команда сборки:
#   npm run build
# Результат:
#   - В папке ./dist будет сгенерированы статические файлы, которые нужно подключить к WEB серверу
#   - Войдя на портал, пользователь будет перенаправлен на авторизацию GitLab
#   - После авторизации пользователь увидит документацию размещенную по в репозитории GitLab - gitlab:43847396:master@root.yaml
#   - Рендеринг PlantUML диаграмм будет осуществляться с использованием публичного сервера с ограничением размера контента.


# (FB)******** Портал с документацией DocHub и backend *****************

# Развертывание в режиме frontend + backend (тонкий клиент)
# содержимое файла .env - ПУСТО

# Команда сборки:
#   npm run backend
# Результат:
#   - Будет собран frontend проект в режиме backend
#   - Будет запущен nodejs сервер на порту 3030 (http://localhost:3030/), где будет поднят портал и backend сервер
#   - Войдя на портал, пользователь увидит только документацию DocHub.
#   - Рендеринг PlantUML диаграмм будет осуществляться с использованием публичного сервера с ограничением размера контента.


# (FB)* Портал с собственной документацией и backend и без документации DocHub**

# Развертывание в режиме frontend + backend (тонкий клиент)
# содержимое файла .env:

# VUE_APP_DOCHUB_ROOT_MANIFEST=workspace/sberauto/root.yaml
# VUE_APP_DOCHUB_APPEND_DOCHUB_DOCS=n


# Команда сборки:
#   npm run backend
# Результат:
#   - Будет собран frontend проект в режиме backend
#   - Будет запущен nodejs сервер на порту 3030 (http://localhost:3030/), где будет поднят портал и backend сервер
#   - Войдя на портал, пользователь увидит документацию размещенную по пути ./public/workspace/sberauto/*
#   - Рендеринг PlantUML диаграмм будет осуществляться с использованием публичного сервера с ограничением размера контента.


# Больше информации о переменных среды выполнения
# https://cli.vuejs.org/ru/guide/mode-and-env.html
